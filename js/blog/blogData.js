'use strict'

console.log('blog data has loaded');

var blogData = [
  {
    title: 'Hello, World!',
    publishedDate: '2/11/17',
    author: 'Morgan',
    postContent: '<p>We\'re about a month and a half into 2017 and I\'ve spent the entirety of the new year on an adventure that\'s been in the works for a long time: learning to code.</p><p>As I trace the meandering path of my 12 year career, I can see that I was beating a slow, uneven path towards technical work. Right out of college I joined the working world as a print production artist because I had experience with InDesign as an editor of my college newspaper. I had graduated with a Studio Art major and thought graphic design would be a great practical application of my degree. My subsequent roles were, in chronological order, print designer, e-learning illustrator, front-end production developer, UX designer to a technical program manager. I cringe a little bit seeing just how many different roles I had, and how different they all were, but I was following a thread.</p><p>My last role as a technical program manager was hands-down my favorite. When I accepted it, it had initially felt like a detour because I ultimately planned on returning to UX design. Once I started, though, I was an enthusiastic sponge for what my new role could teach me. I immersed myself in the software development lifecycle process, I upgraded my team\'s productivity processes and tools, I taught myself how to write great documentation, and I leveraged my user-centered design background to keep the focus on the end user. I was mentored by some amazing managers who taught me skills that don\'t come as naturally to me, like leading meetings and organizing people.</p><p>Once I had gotten all these pieces in place for my team, I realized I still had a deep craving to better understand what my team was producing. The thread I\'d been following emerged as a full-blown pattern, and made the next step clear to me: I needed to understand the code.</p><p>I was about three months into teaching myself JavaScript when my team was dissolved, in November of last year. Even though it had been my favorite role, it was by no means perfect and my team had occupied a precarious political position for over a year. I was sad but excited - it was a rare opportunity to really get the education I wanted without any guilt for leaving a steady job.</p><p>So I signed up for an immersive coding bootcamp, Code Fellows. It\'s taken me up until now to adjust to the bootcamp lifestyle, but I\'m ready to start doing what I\'d intended all along - to document what I\'m learning for myself and share my process along the way. Thank you for joining me!</p>',
    category: ['career']
  },
  {
    title: 'My first month at bootcamp',
    publishedDate: '2/12/17',
    author: 'Morgan',
    postContent: '<p>I was too overwhelmed to start documenting my journey during my first class, so this is a weekly summary of my first bootcamp class!</p><p><strong>Week 1</strong>: This week was a total blur. My brain was so excited to be playing with code puzzles all day long that I neglected my physical existence. I would sit for hours staring at my computer screen and would feel blind by the time I left the building to catch my bus because my focal point had been so fixed for so long. We focused on our computer setup - all getting the same text editor, getting comfortable with the terminal, an intro to git and GitHub, an intro to basics in HTML, CSS, and JS (nothing that went beyond the pre-work, really), but I’ll admit that my knowledge was tested as soon as we got our first assignments.</p><p>Week 2: We delved more into objects and object constructors this week, as well as the concept of the DOM (Document Object Model). We used vanilla JavaScript to do any combination of creating, getting, setting, appending, and removing DOM elements - empowering and also majorly tedious. I think the TAs struggled to help us because it’s pretty unusual to NOT leverage a library like jQuery or React to do this kind of work. On a personal note, I got sick this week and stayed home a day and a half. I actually did better and faster work from home!</p><p>Week 3: This week felt a bit more random - we had a more complex lab that required us to use localStorage, a js library (charts.js) and make more of an effort with user experience and user interface. The UX/UI material was extremely light-weight, mostly just lip service. At the end of the week, we were put into groups for our upcoming project week and did quite a bit of project planning. I was truly grateful for my TPM and UX experience at that point! Our group decided to make a memory game using memes as content.</p><p>Week 4: This week was surprisingly difficult - don’t know why I expected any different from group project week! I felt like my project team had done a great job getting organized and ready the week before, but when it came to execution we didn’t divide the work very well and it created knowledge silos. Our project was on the more complex side of things, and we kept running into the limits of our knowledge. We refactored our code completely because of a bug, only to find that the problem with it was a DOM change happening so quickly it looked like it wasn’t happening and we needed a timer. After getting to our minimum viable product, one of our teammates found a critical bug involving the timer that we just didn’t know how to fix. We dragged ourselves across the finish line. But I learned a lot :)</p>',
    category: ['Code Fellows']
  }
];
